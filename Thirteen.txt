Exception Handling in Python:

   Python's exception handling system allows a program to continue executing (or end gracefully) in the event of an unexpected circumstance. Try, except, else, and finally blocks are used to do this..

Example:

try:
    # Code that might raise an exception
    result = 10 / 0
except ZeroDivisionError:
    # Code to handle the exception
    print("You can't divide by zero!")
else:
    # Code to execute if no exception occurs
    print("Division successful, result:", result)
finally:
    # Code that runs no matter what
    print("This will always run.")

Error in Python:

    A Python error is a problem in the program that leads to its failure. Syntax errors and exceptions are the two main categories of errors.

Syntax Errors:

   When a piece of code fails to conform to proper syntax, the Python parser is unable to comprehend it, leading to syntax errors. These are found during the compilation process.

Exceptions:

    Runtime errors are known as exceptions. The code may result in runtime issues even though it is syntactically correct because of operations that cannot be performed.

    Common exceptions :
    ZeroDivisionError: Raised when dividing by zero.

    TypeError: Raised when an operation is performed on an inappropriate type.

    ValueError: Raised when a function receives an argument of the correct type but inappropriate value.

    FileNotFoundError: Raised when a file operation is attempted on a file that does not exist.

    KeyError: Raised when accessing a dictionary with a non-existent key

    IndexError: Raised when accessing a list with an out-of-range index

